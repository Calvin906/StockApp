package com.preston.data.repo.greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STOCK".
*/
public class StockDao extends AbstractDao<Stock, Void> {

    public static final String TABLENAME = "STOCK";

    /**
     * Properties of entity Stock.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Ticker = new Property(0, String.class, "ticker", false, "TICKER");
        public final static Property EncodedId = new Property(1, String.class, "encodedId", false, "ENCODED_ID");
        public final static Property DailyVolume = new Property(2, Long.class, "dailyVolume", false, "DAILY_VOLUME");
        public final static Property Change = new Property(3, Double.class, "change", false, "CHANGE");
        public final static Property DaysLow = new Property(4, Double.class, "daysLow", false, "DAYS_LOW");
        public final static Property DaysHigh = new Property(5, Double.class, "daysHigh", false, "DAYS_HIGH");
        public final static Property YearsLow = new Property(6, Double.class, "yearsLow", false, "YEARS_LOW");
        public final static Property YearsHigh = new Property(7, Double.class, "yearsHigh", false, "YEARS_HIGH");
        public final static Property MarketCapitalization = new Property(8, String.class, "marketCapitalization", false, "MARKET_CAPITALIZATION");
        public final static Property LastTradePrice = new Property(9, Double.class, "lastTradePrice", false, "LAST_TRADE_PRICE");
        public final static Property DaysRange = new Property(10, String.class, "daysRange", false, "DAYS_RANGE");
        public final static Property Name = new Property(11, String.class, "name", false, "NAME");
        public final static Property Volume = new Property(12, Long.class, "volume", false, "VOLUME");
        public final static Property PricePurchased = new Property(13, Double.class, "PricePurchased", false, "PRICE_PURCHASED");
    }

    private Query<Stock> user_StocksQuery;

    public StockDao(DaoConfig config) {
        super(config);
    }
    
    public StockDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STOCK\" (" + //
                "\"TICKER\" TEXT NOT NULL UNIQUE ," + // 0: ticker
                "\"ENCODED_ID\" TEXT NOT NULL ," + // 1: encodedId
                "\"DAILY_VOLUME\" INTEGER," + // 2: dailyVolume
                "\"CHANGE\" REAL," + // 3: change
                "\"DAYS_LOW\" REAL," + // 4: daysLow
                "\"DAYS_HIGH\" REAL," + // 5: daysHigh
                "\"YEARS_LOW\" REAL," + // 6: yearsLow
                "\"YEARS_HIGH\" REAL," + // 7: yearsHigh
                "\"MARKET_CAPITALIZATION\" TEXT," + // 8: marketCapitalization
                "\"LAST_TRADE_PRICE\" REAL," + // 9: lastTradePrice
                "\"DAYS_RANGE\" TEXT," + // 10: daysRange
                "\"NAME\" TEXT," + // 11: name
                "\"VOLUME\" INTEGER," + // 12: volume
                "\"PRICE_PURCHASED\" REAL);"); // 13: PricePurchased
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_STOCK_ENCODED_ID ON STOCK" +
                " (\"ENCODED_ID\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STOCK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Stock entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getTicker());
        stmt.bindString(2, entity.getEncodedId());
 
        Long dailyVolume = entity.getDailyVolume();
        if (dailyVolume != null) {
            stmt.bindLong(3, dailyVolume);
        }
 
        Double change = entity.getChange();
        if (change != null) {
            stmt.bindDouble(4, change);
        }
 
        Double daysLow = entity.getDaysLow();
        if (daysLow != null) {
            stmt.bindDouble(5, daysLow);
        }
 
        Double daysHigh = entity.getDaysHigh();
        if (daysHigh != null) {
            stmt.bindDouble(6, daysHigh);
        }
 
        Double yearsLow = entity.getYearsLow();
        if (yearsLow != null) {
            stmt.bindDouble(7, yearsLow);
        }
 
        Double yearsHigh = entity.getYearsHigh();
        if (yearsHigh != null) {
            stmt.bindDouble(8, yearsHigh);
        }
 
        String marketCapitalization = entity.getMarketCapitalization();
        if (marketCapitalization != null) {
            stmt.bindString(9, marketCapitalization);
        }
 
        Double lastTradePrice = entity.getLastTradePrice();
        if (lastTradePrice != null) {
            stmt.bindDouble(10, lastTradePrice);
        }
 
        String daysRange = entity.getDaysRange();
        if (daysRange != null) {
            stmt.bindString(11, daysRange);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(12, name);
        }
 
        Long volume = entity.getVolume();
        if (volume != null) {
            stmt.bindLong(13, volume);
        }
 
        Double PricePurchased = entity.getPricePurchased();
        if (PricePurchased != null) {
            stmt.bindDouble(14, PricePurchased);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Stock entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getTicker());
        stmt.bindString(2, entity.getEncodedId());
 
        Long dailyVolume = entity.getDailyVolume();
        if (dailyVolume != null) {
            stmt.bindLong(3, dailyVolume);
        }
 
        Double change = entity.getChange();
        if (change != null) {
            stmt.bindDouble(4, change);
        }
 
        Double daysLow = entity.getDaysLow();
        if (daysLow != null) {
            stmt.bindDouble(5, daysLow);
        }
 
        Double daysHigh = entity.getDaysHigh();
        if (daysHigh != null) {
            stmt.bindDouble(6, daysHigh);
        }
 
        Double yearsLow = entity.getYearsLow();
        if (yearsLow != null) {
            stmt.bindDouble(7, yearsLow);
        }
 
        Double yearsHigh = entity.getYearsHigh();
        if (yearsHigh != null) {
            stmt.bindDouble(8, yearsHigh);
        }
 
        String marketCapitalization = entity.getMarketCapitalization();
        if (marketCapitalization != null) {
            stmt.bindString(9, marketCapitalization);
        }
 
        Double lastTradePrice = entity.getLastTradePrice();
        if (lastTradePrice != null) {
            stmt.bindDouble(10, lastTradePrice);
        }
 
        String daysRange = entity.getDaysRange();
        if (daysRange != null) {
            stmt.bindString(11, daysRange);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(12, name);
        }
 
        Long volume = entity.getVolume();
        if (volume != null) {
            stmt.bindLong(13, volume);
        }
 
        Double PricePurchased = entity.getPricePurchased();
        if (PricePurchased != null) {
            stmt.bindDouble(14, PricePurchased);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Stock readEntity(Cursor cursor, int offset) {
        Stock entity = new Stock( //
            cursor.getString(offset + 0), // ticker
            cursor.getString(offset + 1), // encodedId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // dailyVolume
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // change
            cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4), // daysLow
            cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5), // daysHigh
            cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6), // yearsLow
            cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7), // yearsHigh
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // marketCapitalization
            cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9), // lastTradePrice
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // daysRange
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // name
            cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12), // volume
            cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13) // PricePurchased
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Stock entity, int offset) {
        entity.setTicker(cursor.getString(offset + 0));
        entity.setEncodedId(cursor.getString(offset + 1));
        entity.setDailyVolume(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setChange(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setDaysLow(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
        entity.setDaysHigh(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
        entity.setYearsLow(cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6));
        entity.setYearsHigh(cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7));
        entity.setMarketCapitalization(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setLastTradePrice(cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9));
        entity.setDaysRange(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setName(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setVolume(cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12));
        entity.setPricePurchased(cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Stock entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Stock entity) {
        return null;
    }

    @Override
    public boolean hasKey(Stock entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "stocks" to-many relationship of User. */
    public List<Stock> _queryUser_Stocks(String encodedId) {
        synchronized (this) {
            if (user_StocksQuery == null) {
                QueryBuilder<Stock> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.EncodedId.eq(null));
                user_StocksQuery = queryBuilder.build();
            }
        }
        Query<Stock> query = user_StocksQuery.forCurrentThread();
        query.setParameter(0, encodedId);
        return query.list();
    }

}
